diff --git a/include/swift/Basic/LangOptions.h b/include/swift/Basic/LangOptions.h
index 1401f7324fd..6700ed5aaee 100644
--- a/include/swift/Basic/LangOptions.h
+++ b/include/swift/Basic/LangOptions.h
@@ -352,6 +352,11 @@ namespace swift {
     /// was not compiled with -enable-testing.
     bool EnableTestableAttrRequiresTestableModule = true;
 
+    /// Experimental
+    /// Disables @objc and dynamic attrs
+    /// Ignored when EnableObjCInterop == true
+    bool DisableObjCAttr = false;
+
     ///
     /// Flags for developers
     ///
diff --git a/include/swift/Option/FrontendOptions.td b/include/swift/Option/FrontendOptions.td
index af94cecfd66..ff22ef602ea 100644
--- a/include/swift/Option/FrontendOptions.td
+++ b/include/swift/Option/FrontendOptions.td
@@ -157,6 +157,11 @@ def verify_generic_signatures : Separate<["-"], "verify-generic-signatures">,
 def show_diagnostics_after_fatal : Flag<["-"], "show-diagnostics-after-fatal">,
   HelpText<"Keep emitting subsequent diagnostics after a fatal error">;
   
+def experimental_disable_objc_attr : Flag<["-"], "experimental-disable-objc-attr">,
+  Flags<[FrontendOption]>,
+  HelpText<"Disables parsing @objc and dynamic attrs. "
+           "Ignored if Objective-C interop enabled">;
+
 def enable_cross_import_overlays : Flag<["-"], "enable-cross-import-overlays">,
   HelpText<"Automatically import declared cross-import overlays.">;
 def disable_cross_import_overlays : Flag<["-"], "disable-cross-import-overlays">,
diff --git a/lib/Driver/ToolChains.cpp b/lib/Driver/ToolChains.cpp
index a945f376fa3..ed49ed28200 100644
--- a/lib/Driver/ToolChains.cpp
+++ b/lib/Driver/ToolChains.cpp
@@ -270,6 +270,7 @@ void ToolChain::addCommonFrontendArgs(const OutputInfo &OI,
   inputArgs.AddAllArgs(arguments, options::OPT_enable_experimental_feature);
   inputArgs.AddAllArgs(arguments, options::OPT_enable_upcoming_feature);
   inputArgs.AddLastArg(arguments, options::OPT_warn_implicit_overrides);
+  inputArgs.AddLastArg(arguments, options::OPT_experimental_disable_objc_attr);
   inputArgs.AddLastArg(arguments, options::OPT_typo_correction_limit);
   inputArgs.AddLastArg(arguments, options::OPT_enable_app_extension);
   inputArgs.AddLastArg(arguments, options::OPT_enable_app_extension_library);
diff --git a/lib/Frontend/CompilerInvocation.cpp b/lib/Frontend/CompilerInvocation.cpp
index 4beea4d7b51..c86026dca88 100644
--- a/lib/Frontend/CompilerInvocation.cpp
+++ b/lib/Frontend/CompilerInvocation.cpp
@@ -820,6 +820,8 @@ static bool ParseLangArgs(LangOptions &Opts, ArgList &Args,
 
   Opts.EnableThrowWithoutTry |= Args.hasArg(OPT_enable_throw_without_try);
 
+  Opts.DisableObjCAttr |= Args.hasArg(OPT_experimental_disable_objc_attr);
+
   Opts.ThrowsAsTraps |= Args.hasArg(OPT_throws_as_traps);
 
   if (auto A = Args.getLastArg(OPT_enable_objc_attr_requires_foundation_module,
diff --git a/lib/Parse/ParseDecl.cpp b/lib/Parse/ParseDecl.cpp
index 2c6f69cd220..0f94a99adf9 100644
--- a/lib/Parse/ParseDecl.cpp
+++ b/lib/Parse/ParseDecl.cpp
@@ -6565,6 +6565,30 @@ ParserResult<Decl> Parser::parseDecl(bool IsAtStartOfLineOrPreviousHadSemi,
       return DeclResult;
   }
 
+  if (auto SF = CurDeclContext->getParentSourceFile()) {
+    if (!InInactiveClauseEnvironment) {
+
+      bool ObjCAttrDisabled = Context.LangOpts.DisableObjCAttr
+        && !Context.LangOpts.EnableObjCInterop; // do nothing if ObjCInterop enabled
+
+      bool AttributesChanged = false;
+
+      for (auto Attr : Attributes) {
+        if (isa<ObjCAttr>(Attr)) {
+          if (ObjCAttrDisabled) {
+            Attr->setInvalid();
+            Attributes.removeAttribute(Attr);
+            AttributesChanged = true;
+          }
+        }
+      }
+
+      if (AttributesChanged) {
+        DeclResult.get()->getAttrs() = Attributes;
+      }
+    }
+  }
+
   if (DeclResult.isNonNull()) {
     Decl *D = DeclResult.get();
     if (!HandlerAlreadyCalled)
